import React from 'react';

import { Pagination, Skeleton, Categories, Sort, PizzaBlock } from '../components';

// Redux
import { useSelector } from 'react-redux';
import { useAppDispatch } from '../redux/store';
import { selectorFilter } from '../redux/filter/selectors';
import { setCategoryId, setPageCurrent } from '../redux/filter/slice';
import { selectorPizzasData } from '../redux/pizza/selectors';
import { fetchPizzas } from '../redux/pizza/asyncActions';

const Home: React.FC = () => {
  // –î–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ REDUX
  const { items, status } = useSelector(selectorPizzasData);
  const { categoryId, sortValues, pageCurrent, sortOrder, searchValue } = useSelector(selectorFilter);
  const dispatch = useAppDispatch();

  // –°–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const onChaneCategory = React.useCallback((idx: number) => {
    dispatch(setCategoryId(idx));
  }, []); // –§-—è —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –∏ –Ω–µ –¥–µ–ª–∞–µ—Ç –ª–∏—à–Ω–µ–≥–æ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞

  // –°–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
  const onChangePage = (number: number) => {
    dispatch(setPageCurrent(number));
  };

  // –ó–∞–ø—Ä–æ—Å –Ω–∞ BACK END
  React.useEffect(() => {
    const getPizzas = async () => {
      const categoryUrl = categoryId > 0 ? `category=${categoryId}` : '';
      const ascOrDescUrl = sortOrder === true ? 'asc' : 'desc';
      const searchUrl = searchValue ? `&search=${searchValue}` : ''; // —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å URL –∞–¥—Ä–µ—Å—Å–æ–º

      // –° –ø–æ–º–æ—â—å—é fetchPizzas –º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º –æ—Ç–ª–æ–≤ –æ—à–∏–±–æ–∫,
      // –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
      // –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º fetchPizzas –∏–∑ redux –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Å—é–¥–∞
      dispatch(
        fetchPizzas({
          categoryUrl,
          ascOrDescUrl,
          searchUrl,
          pageCurrent,
          sortValues,
        })
      );
    };
    getPizzas();
  }, [categoryId, dispatch, pageCurrent, searchValue, sortValues, sortValues.sortProperty, sortOrder]);
  // /.–ó–∞–ø—Ä–æ—Å –Ω–∞ BACK END

  // –ú–∞–ø–ø–∏–Ω–≥ –ø–∏—Ü —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –Ω–∏—Ö
  const dataPizzasComplete = items.map((item: any, index: number) => (
    <PizzaBlock // –í key –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å index, –µ—Å–ª–∏ index —Å—Ç–∞—Ç–∏—á–Ω—ã–π
      key={index}
      title={item.title}
      price={item.price}
      imageUrl={item.imageUrl}
      sizes={item.sizes}
      typesPizza={item.types}
      id={item.id}
      rating={item.rating}
    />
  ));
  const skeletons = [...new Array(4)].map((_, id) => <Skeleton key={id} />);

  return (
    <div className="container">
      <div className="content__top">
        <Categories categoryActiveId={categoryId} onChangeCategory={onChaneCategory} />
        <Sort valueSort={sortValues} sortOrder={sortOrder} />
      </div>

      <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>

      {/* –†–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–∫–µ–Ω–¥–∞ */}
      {status === 'error' ? (
        <div className="content__error-info">
          <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üò¢</h2>
          <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–±–æ—Ä –ø–∏—Ç—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç—Ä–æ–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —á—É—Ç—å –ø–æ–∑–∂–µ.</p>
        </div>
      ) : (
        <div className="content__items">
          {status === 'loading'
            ? // –†–µ–Ω–¥–µ—Ä —Å–∫–µ–ª–µ—Ç–æ–Ω–∞
              skeletons // [...new Array(6)] - —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–µ–π–∫–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
            : //
              dataPizzasComplete}
        </div>
      )}

      {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
      <Pagination pageCurrent={pageCurrent} onChangePage={onChangePage} />
    </div>
  );
};

export default Home;
